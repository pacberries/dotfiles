

#+TITLE: Insert Emacs Config
#+AUTHOR: Insert5StarName

Config Is Very Messy

* Package Management
** Setup Repos

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;;(package-refresh-contents)
  (package-initialize)
#+end_src

** Install use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src
  
* Configure Themes and other stuff
** Set theme
#+begin_src emacs-lisp
  (window-divider-mode)
 ;; (setq mouse-autoselect-window t)
  (global-display-line-numbers-mode)
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-monokai-pro t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use doom atom for more minimal icons
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
  ;;(load-theme 'monokai t)
  (set-default 'truncate-lines t)
  (require 'elcord)
  (elcord-mode)
  (setq use-dialog-box nil)
  (use-package doom-modeline)
  (add-hook 'emacs-startup-hook 'doom-modeline-mode)
  (setq doom-themes-treemacs-enable-variable-pitch nil)
  ;;(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))

  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  vterm-mode-hook
		  shell-mode-hook
		  eshell-mode-hook
		  treemacs-mode-hook
		  ))
    (add-hook mode(lambda() (display-line-numbers-mode 0))))

#+end_src

#+RESULTS:
| centaur-tabs-local-mode | (lambda nil (display-line-numbers-mode 0)) |

** Custom Keybinds
#+begin_src emacs-lisp
  (global-set-key "\C-cd" 'kill-whole-line)
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
  (global-set-key (kbd "C-x C-b") 'kill-other-buffers)
  (global-set-key (kbd "C-x C-u") 'sudo-edit-find-file)
  (global-set-key (kbd "C-x C-o") 'sudo-edit)
  (global-set-key (kbd "C-z") 'undo-tree-undo)
  (global-set-key (kbd "C-o") 'undo-tree-redo)
  (defun reload-dotemacs ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "C-x e") 'reload-dotemacs)
#+end_src
** MISC
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
  (use-package shell-pop
    :custom
    (shell-pop-shell-type '("vterm" "*vterm*" (lambda () (vterm))))
    (shell-pop-full-span t)
    :bind*
    (("M-t" . shell-pop)))
  (use-package sudo-edit
    :commands sudo-edit)
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-banner-logo-title "Hello Insert5StarName, Welcome Back.")
  (setq dashboard-startup-banner 3)
  (setq dashboard-center-content t))
#+end_src

* Setup Intelisense
#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq gc-cons-threshold 100000000)
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((java-mode python-mode go-mode rust-mode
		      js-mode js2-mode typescript-mode web-mode
		      c-mode c++-mode objc-mode yaml-mode svelte-mode) . lsp-deferred)
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (setq lsp-enable-indentation nil)

  ;; YAML
  (add-hook 'yaml-mode-hook
	    (lambda ()
	      (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
  (use-package apheleia
    :config
    (setf (alist-get 'prettier apheleia-formatters)
	  '(npx "prettier"
		"--trailing-comma"  "es5"
		"--bracket-spacing" "true"
		"--single-quote"    "true"
		"--semi"            "false"
		"--print-width"     "100"
		file))
    (add-to-list 'apheleia-mode-alist '(rjsx-mode . prettier))
    (apheleia-global-mode t))
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'js-mode-hook #'aggressive-indent-mode)
  (add-hook 'typescript-mode-hook #'aggressive-indent-mode)
  (add-hook 'yaml-hook #'aggressive-indent-mode)
#+end_src
  
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x C-n"   . treemacs)
	  ("C-x t t"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
  (add-hook 'emacs-startup-hook 'treemacs)
  (use-package centaur-tabs
  :demand
  :config
  (centaur-tabs-mode t)
  (defun centaur-tabs-buffer-groups ()
        "Use as few groups as possible."
        (list (cond ((string-equal "*" (substring (buffer-name) 0 1))
                     (cond ((string-equal "eglot" (downcase (substring (buffer-name) 1 6)))
                            "Eglot")
                           (t
                            "Tools")))
                    ((string-equal "magit" (downcase (substring (buffer-name) 0 5)))
                     "Magit")
                    (t
                     "Default"))))
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-height 32)
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-set-bar 'left)
    (centaur-tabs-headline-match)
  ;;(setq x-underline-at-descent-line t)
  ;;(setq centaur-tabs-close-button "󰅙")
   :bind
  ("M-<left>" . centaur-tabs-backward)
  ("M-<right>" . centaur-tabs-forward))
  (add-hook 'treemacs-mode-hook 'centaur-tabs-local-mode)
  (add-hook 'vterm-mode-hook 'centaur-tabs-local-mode)

#+end_src
 

* Other Packages
** Undo System
#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
#+end_src

